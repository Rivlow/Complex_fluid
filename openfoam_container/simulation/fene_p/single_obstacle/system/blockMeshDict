/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     5.0                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  | For copyright notice see file Copyright         |
\*---------------------------------------------------------------------------*/

FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 0.0032;

vertices
(
    // Bottom plane points (z = 0)
    (0 0 0)        // 0  - Block 1 (bottom-left corner)
    (45 0 0)       // 1  - Block 1 (bottom-right corner)
    (0 1 0)        // 2  - Block 1 (top-left corner)
    (45 1 0)       // 3  - Block 1 (top-right corner)    
    (0 2 0)        // 4  - Block 2 (top-left corner)
    (45 2 0)       // 5  - Block 2 (top-right corner)
    (0 3 0)        // 6  - Block 3 (top-left corner)
    (45 3 0)       // 7  - Block 3 (top-right corner)

    (65 0 0)       // 8  - Block 5 (bottom-left corner)


    (115 0 0)      // 9  - Block 5 (bottom-right corner)
    (65 1 0)       // 10 - Block 5 (top-left corner)
    (115 1 0)      // 11 - Block 5 (top-right corner)
    (65 2 0)       // 12 - Block 6 (top-left corner)
    (115 2 0)      // 13 - Block 6 (top-right corner)
    (65 3 0)       // 14 - Block 7 (top-left corner)
    (115 3 0)      // 15 - Block 7 (top-right corner)

    // Top plane points (z = 0.1)
    (0 0 0.1)      // 16 - Block 1 (bottom-left corner)
    (45 0 0.1)     // 17 - Block 1 (bottom-right corner)
    (0 1 0.1)      // 18 - Block 1 (top-left corner)
    (45 1 0.1)     // 19 - Block 1 (top-right corner)  
    (0 2 0.1)      // 20 - Block 2 (top-left corner)
    (45 2 0.1)     // 21 - Block 2 (top-right corner)
    (0 3 0.1)      // 22 - Block 3 (top-left corner)
    (45 3 0.1)     // 23 - Block 3 (top-right corner)

    (65 0 0.1)     // 24 - Block 5 (bottom-left corner)
    (115 0 0.1)    // 25 - Block 5 (bottom-right corner)
    (65 1 0.1)     // 26 - Block 5 (top-left corner)
    (115 1 0.1)    // 27 - Block 5 (top-right corner)
    (65 2 0.1)     // 28 - Block 6 (top-left corner)
    (115 2 0.1)    // 29 - Block 6 (top-right corner)
    (65 3 0.1)     // 30 - Block 7 (top-left corner)
    (115 3 0.1)    // 31 - Block 7 (top-right corner)
);

blocks
(
    // inlet_face
    hex (0 1 3 2 16 17 19 18) (35 22 1) simpleGrading (0.002 3.333 1)    // Block 1 (lower inlet)
    hex (2 3 5 4 18 19 21 20) (35 22 1) simpleGrading (0.002 3.333 1)    // Block 2 (middle inlet)
    hex (4 5 7 6 20 21 23 22) (35 22 1) simpleGrading (0.002 3.333 1)    // Block 3 (upper inlet)

    // obstruction_face
    hex (3 10 12 5 19 26 28 21) (35 22 1) simpleGrading (0.002 3.333 1)  // Block 4 (central obstruction)

    // outlet_face
    hex (8 9 11 10 24 25 27 26) (35 22 1) simpleGrading (0.002 3.333 1)  // Block 5 (lower outlet)
    hex (10 11 13 12 26 27 29 28) (35 22 1) simpleGrading (0.002 3.333 1) // Block 6 (middle outlet)
    hex (12 13 15 14 28 29 31 30) (35 22 1) simpleGrading (0.002 3.333 1) // Block 7 (upper outlet)
);

edges
(
);

boundary
(
    inlet
    {
        type patch;
        faces
        (
            (0 16 18 2)    // Block 1 (inlet face)
            (2 18 20 4)    // Block 2 (inlet face)
            (4 20 22 6)    // Block 3 (inlet face)
        );
    }

    fixedWalls
    {
        type wall;
        faces
        (
            // Upper part : type non-slip wall
            (6 22 23 7)    // Block 3 (top face)
            (5 7 23 21)    // Block 3 (right face)
            (5 21 28 12)   // Block 4 (top face)
            (12 28 30 14)  // Block 7 (left face)
            (14 30 31 15)  // Block 7 (top face)

            // Bottom part : type non-slip wall
            (0 16 17 1)    // Block 1 (bottom face)
            (1 17 19 3)    // Block 1 (right face)
            (3 19 26 10)   // Block 4 (bottom face)
            (8 24 26 10)   // Block 5 (left face)
            (8 24 25 9)    // Block 5 (bottom face)
        );
    }

    outlet
    {
        type patch;
        faces
        (
            (9 11 27 25)   // Block 5 (outlet face)
            (11 13 29 27)  // Block 6 (outlet face)
            (13 15 31 29)  // Block 7 (outlet face)
        );
    }

    frontAndBack
    {
        type empty;
        faces
        (
            // Front faces (z = 0)
            (0 2 3 1)      // Block 1 (front face)
            (2 4 5 3)      // Block 2 (front face)
            (4 6 7 5)      // Block 3 (front face)
            
            (8 10 11 9)    // Block 5 (front face)
            (10 12 13 11)  // Block 6 (front face)
            (12 14 15 13)  // Block 7 (front face)

            (3 5 12 10)    // Block 4 (front face)

            // Back faces (z = 0.1)
            (16 18 19 17)  // Block 1 (back face)
            (18 20 21 19)  // Block 2 (back face)
            (20 22 23 21)  // Block 3 (back face)

            (19 26 28 21)  // Block 4 (back face)
            
            (24 26 27 25)  // Block 5 (back face)
            (26 28 29 27)  // Block 6 (back face)
            (28 30 31 29)  // Block 7 (back face)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //